###############################################################################
#
# EGSnrc config file
#
# Created by configure version 2.0 on Thu  8 May 2025 21:40:07 EDT
#
# Attention: all changes you make to this file may be lost next time
# you run configure.
#
###############################################################################

DSEP = /

my_machine = osx
canonical_system = arm-apple-darwin24.4.0
make_prog = make

HEN_HOUSE = /Users/tylerpunkari/GIT/EGSnrc/HEN_HOUSE/
SPEC_DIR = $(HEN_HOUSE)specs/

# Include the standard Unix spec file
#
include $(SPEC_DIR)unix.spec

# Include definitions common for all systems.
# These are mainly directory names, executable names, etc.,
# which are constructed from the previous definitions.
#
include $(SPEC_DIR)all_common.spec

# Fortran compiler name and options
#
F77 = gfortran
F77_LINK = gcc
FCFLAGS = -fPIC
FOPT = -O2 -mtune=native 
FDEBUG = -g
FLIBS = 
FOUT = -o 
FOBJE = o


# C compiler name and options
#
CC = gcc
C_FLAGS = -O2
COUT = -o 

# The following is for creating a DSO
# (dynamic shared object, also known as DLL in the Windows world)
# At this point we don't have a procedure in place to determine
# the compile/link flags necessary to create a DSO.
# We therefore put generic values here that are known to work
# on Linux with the GNU, PGI and Intel compilers, on Windows
# with the GNU compiler and on IRIX with the SGI compiler.
# It is up to the user to adjust if this does not work for them.
# Note that the -Wl,-Bsymbolic option is needed on the systems tested
# to make fortran common blocks local to the DSO.
#
SHLIB_FLAGS = -bundle

# When using the GNU compiler on Linux, one must link against the static
# g2c library, otherwise I/O is shared between the
# main process and the library => the library process fails
# because units that it wants to open are already opened
# by the main process.
# The following variable is set to be empty, but if you use
# the GNU compiler set it to /usr/lib/libg2c.a (or wherever your
# static g2c library is installed).
#
SHLIB_LIBS = -lgfortran -lquadmath

# Use the following make variable in EGSnrc user codes that
# use the new parallel processing implementation to set the variable
# EGS_EXTRA_OBJECTS
#
CUTIL_OBJECTS = $(HEN_HOUSE)lib/$(my_machine)/egs_c_utils.o

# Use the following variable in EGSnrc user codes that
# use a BEAMnrc user code compiled and linked as a DSO
# (dynamic shared object, also known as DLLs) as a
# particle source.
#
BEAMLIB_OBJECTS = $(HEN_HOUSE)lib/$(my_machine)/load_beamlib.o

# load_beamlib uses system calls to load a DSO and to resolve the addresses
# of the various functions in the DSO (dlopen and dlsym on Unix,
# LoadLibrary and GetProcAddress on Windows). On Linux, Windows with GCC
# and various other Unixes the system library that must be linked to get
# access to these system calls is dl. If this is not the case for you,
# adjust accordingly.
#
BEAMLIB_EXTRA_LIBS = -ldl $(IAEA_LIB)

# FC_FLAGS gets used for compiling the EGSnrc fortran routines and for
# linking for EGSnrc user codes written in C. We set FC_FLAGS by
# default to be given by $(FCFLAGS) $(FOPT). This is OK for most
# compilers. Unfortunately, some Fortran compilers insert a default
# main function and then complain about multiply defined main
# (theirs and the main of the user-code written in C), unless a special
# flag is passed. For instance, the PGI compiler needs -Mnomain.
# As I don't know how to test for this feature, it is left up to you
# to read the documentation of your compiler and adjust FC_FLAGS in
# case it does not work.
#
FC_FLAGS = $(FOPT) $(FCFLAGS)

# The following variables are needed to define the IAEA phase space library
# and the way EGSnrc user codes link against it.
#
dso = dso$(DSEP)$(my_machine)
abs_dso = $(HEN_HOUSE)egs++$(DSEP)$(dso)
ABS_DSO = $(abs_dso)$(DSEP)
IAEA_LIB = -L$(abs_dso) -liaea_phsp
IAEA_PHSP_MACROS = $(EGS_UTILS)iaea_phsp_macros.mortran
